# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PortugueseChargingStation
                                 A QGIS plugin
 This plugin displays portuguese charging stations
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Beatriz Cepa, Beatriz Soares
        email                : beatrizps99@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject
import json
import requests
from re import *
import pandas as pd
import xmltodict
import os
from qgis.core import *


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .portuguese_charging_station_dialog import PortugueseChargingStationDialog
import os.path


class PortugueseChargingStation:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PortugueseChargingStation_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Portuguese Charging Station')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PortugueseChargingStation', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
        """
        :param icon_path: ':/plugins/portuguese_charging_station/icon.png'
        
        :type icon_path: str

        
        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/portuguese_charging_station/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Display portuguese charging stations'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Portuguese Charging Station'),
                action)
            self.iface.removeToolBarIcon(action)


    def make_request_overpass(self):

        # Ir buscar os dados dos postos elétricos à API do Overpass
        response = requests.get('https://lz4.overpass-api.de/api/interpreter?data=%3Cosm-script output%3D%22xml%22 timeout%3D%2225%22%3E%0A    %3Cid-query ref%3D%223600295480%22 type%3D%22area%22 into%3D%22area_0%22/%3E%0A    %3Cunion%3E%0A        %3Cquery type%3D%22node%22%3E%0A            %3Chas-kv k%3D%22amenity%22 v%3D%22charging_station%22/%3E%0A            %3Carea-query from%3D%22area_0%22/%3E%0A        %3C/query%3E%0A        %3Cquery type%3D%22way%22%3E%0A            %3Chas-kv k%3D%22amenity%22 v%3D%22charging_station%22/%3E%0A            %3Carea-query from%3D%22area_0%22/%3E%0A        %3C/query%3E%0A        %3Cquery type%3D%22relation%22%3E%0A            %3Chas-kv k%3D%22amenity%22 v%3D%22charging_station%22/%3E%0A            %3Carea-query from%3D%22area_0%22/%3E%0A        %3C/query%3E%0A    %3C/union%3E%0A    %3Cunion%3E%0A        %3Citem/%3E%0A        %3Crecurse type%3D%22down%22/%3E%0A    %3C/union%3E%0A    %3Cprint mode%3D%22body%22/%3E%0A%3C/osm-script%3E&info=QgisQuickOSMPlugin')

        # Converter o xml recebido num dicionário
        dict_data = xmltodict.parse(response.content)
        
        # Converter o dicionário para Json
        json_data = json.dumps(dict_data)

        # Escrever o Json num ficheiro
        with open("C:/Users/user/Desktop/SIG/Dados/osm_data.json", "w") as json_file:
            json_file.write(json_data)


    def make_request_mobie(self):

        # Ir buscar os dados dos postos elétricos à API do Overpass
        response = requests.get('https://ocpi.mobinteli.com/2.2/locations')

        # Converter o dicionário para Json
        dict_data = json.loads(response.content)

        for el in dict_data:
            latitude = el['coordinates']['latitude']
            longitude = el['coordinates']['longitude']
            el['latitude'] = latitude
            el['longitude'] = longitude
        
        # Converter o dicionário para Json
        json_data = json.dumps(dict_data)

        # Escrever o Json num ficheiro
        with open("C:/Users/user/Desktop/SIG/Dados/mobie_data.json", "w") as json_file:
            json_file.write(json_data)
        

    # Remover lixo e organizar a informação
    def processa(self,json_file):

        with open(json_file) as f:
            data = json.load(f)

        for posto in data:
            print(posto)

        '''json_data = json.dumps(content)
        
        # Escrever o Json processado num ficheiro
        with open("C:/Users/user/Desktop/SIG/Dados/osm_data_processado.json", "w") as json_file:
            json_file.write(json_data)'''


    # Remover lixo e extrair apenas a informação dos postos
    def extrai_postos(self,json_file):

        with open(json_file) as f:
            data = json.load(f)

        # Ignorar metadados e informação de cabeçalho
        content = data['osm']['node']

        # Limpar os dados e estruturar mais direitinho
        for posto in content:
            for dic in posto['tag']:
                chave = dic['@k']
                valor = dic['@v']
                posto[chave] = valor
                del dic['@k']
                del dic['@v']
            del posto['tag']   
            for key in list(posto.keys()):
                if '@' in key:
                    key_nova = key.replace('@','')
                    posto[key_nova] = posto[key]
                    del posto[key]

        json_data = json.dumps(content)
        
        # Escrever o Json processado num ficheiro
        with open("C:/Users/user/Desktop/SIG/Dados/osm_data_processado.json", "w") as json_file:
            json_file.write(json_data)


    # converter o json para csv
    def convert_json_to_csv(self,json_file,csv_file):

        df = pd.read_json(json_file)

        df.to_csv(f'C:/Users/user/Desktop/SIG/Dados/{csv_file}')
        

    # adicionar camada a partir dos dados do csv
    def add_layer_osm(self,uri):
    
        vlayer = QgsVectorLayer(uri, "postos_carregamento_overpass", "delimitedtext")
    
        QgsProject.instance().addMapLayer(vlayer)
        
        categories = []
        # get unique values
        unique_values = ['yes','no','']
        label = {'yes':'cobra taxa','no':'não cobra taxa','':'desconhecido'}
        for unique_value in unique_values:
            # initialize the default symbol for this geometry type
            symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
            
            if unique_value == 'yes':
                path = "C:/Users/user/Desktop/SIG/Icones/carro-eletrico.svg"
            elif unique_value == 'no':
                path = "C:/Users/user/Desktop/SIG/Icones/carro-eletrico2.svg"
            else:
                path = "C:/Users/user/Desktop/SIG/Icones/carro-eletrico3.svg"
                
            new_symbol = QgsSvgMarkerSymbolLayer(path)
            new_symbol.setSize(6)
            
            # replace default symbol layer with the configured one
            symbol.changeSymbolLayer(0, new_symbol)

            # create renderer object
            category = QgsRendererCategory(unique_value, symbol, label[unique_value])
            # entry for the list of category items
            categories.append(category)
        
        # create renderer object
        renderer = QgsCategorizedSymbolRenderer('fee', categories)

        # assign the created renderer to the layer
        vlayer.setRenderer(renderer)


    # adicionar camada a partir dos dados do csv
    def add_layer_mobie(self,uri):
    
        vlayer = QgsVectorLayer(uri, "postos_carregamento_mobie", "delimitedtext")
    
        QgsProject.instance().addMapLayer(vlayer)


    def add_open_street_map(self):
        
        sources = [layer.source() for layer in QgsProject.instance().mapLayers().values()]
        source_found = False
        for source in sources:
            if 'xyz&url' in source:
                source_found = True
                print('Encontrada uma camada')
        if not source_found:
            print('A adicionar camada...')
            urlWithParams = 'type=xyz&url=http://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&zmax=19&zmin=0&crs=EPSG3857'
            rlayer = QgsRasterLayer(urlWithParams, 'OpenStreetMap', 'wms')
            if rlayer.isValid():
                QgsProject.instance().addMapLayer(rlayer)
            else:
                print('Camada inválida')

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PortugueseChargingStationDialog()

        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        for info in ['MobiE_data, Overpass_data']:
            self.dlg.comboBox.addItems([info])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            self.add_open_street_map()

            self.make_request_mobie()
            self.make_request_overpass()

            json_files = ['osm_data','mobie_data']

            for file in json_files:

                if file == 'osm_data':
                    self.extrai_postos('osm_data.json')
                    self.convert_json_to_csv('osm_data_processado.json','osm_data.csv')
                    uri = "file:///C:/Users/user/Desktop/SIG/Dados/osm_data.csv?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s" % ("UTF-8",",", "lon", "lat","epsg:4326")
                    self.add_layer_osm(uri)
                
                elif file == 'mobie_data':
                    self.convert_json_to_csv('mobie_data.json','mobie_data.csv')
                    uri = "file:///C:/Users/user/Desktop/SIG/Dados/mobie_data.csv?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s" % ("UTF-8",",", "longitude", "latitude","epsg:4326")
                    self.add_layer_mobie(uri)

