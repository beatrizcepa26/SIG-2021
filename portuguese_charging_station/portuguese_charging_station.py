# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PortugueseChargingStation
                                 A QGIS plugin
 This plugin displays portuguese charging stations
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Beatriz Cepa, Beatriz Soares
        email                : beatrizps99@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject
import json
import requests
from re import *
import pandas as pd
import os
from qgis.core import *
from pandas import json_normalize
import csv
from requests.exceptions import HTTPError
from requests.packages import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
from .resources import *
from .portuguese_charging_station_dialog import PortugueseChargingStationDialog
import os.path

caminho = 'C:/Users/user/AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/portuguese_charging_station/data/'

class PortugueseChargingStation:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PortugueseChargingStation_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Portuguese Charging Station')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PortugueseChargingStation', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        
        """
        :param icon_path: ':/plugins/portuguese_charging_station/icon.png'
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/portuguese_charging_station/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Display portuguese charging stations'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Portuguese Charging Station'),
                action)
            self.iface.removeToolBarIcon(action)


    def make_request(self, url):

        try:
            # get electrical stations' data from the URL
            response = requests.get(url,verify=False)

            # convert the result to json
            json_data = response.json()
            
            return json_data

        except HTTPError as http_error:
            print(f'HTTP error occurred: {http_error}')
    

    def make_request_mobie_tarifas(self, url, csv_file):

        try:
            # get the fees' data from the Mobi.E charging stations
            response = requests.get(url,verify=False)
            
            # get only the content of the response
            content = response.content.decode('utf-8')

        # if the file is not returned, raise an error
        except HTTPError as http_error:
            print(f'HTTP error occurred: {http_error}')                     
            
        cr = csv.reader(content.splitlines(), delimiter=';')
        my_list = list(cr)
        
        # write the content in a csv file and save it
        with open(caminho+csv_file, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerows(my_list)
        

    def merge_csvs(self,mobie_data,tarifas_data):

        mobie = pd.read_csv(caminho+mobie_data)
        tarifas = pd.read_csv(caminho+tarifas_data)

        tarifas.rename(columns={tarifas.columns[0]:'id','Value':'Value (â‚¬)'},inplace=True)

        del tarifas['MinLevelValue']
        del tarifas['MaxLevelValue']

        # merge the information about the charging stations and their corresponding Mobi.E fees
        output = pd.merge(mobie, tarifas, on='id', how='inner')

        del output['Unnamed: 0']

        # write the final resultas in a csv file
        output.to_csv(caminho+'mobie_data_processado.csv')


    # Organize the Mobi.E information and remove unnecessary fields
    def processa(self,json_data):

        for posto in json_data:
            latitude = posto['coordinates']['latitude']
            longitude = posto['coordinates']['longitude']
            posto['latitude'] = latitude
            posto['longitude'] = longitude
            del posto['coordinates']
            info = posto['evses']
            posto['evse'] = []
            posto['connector'] = []
            for tomada in info:
                posto['evse']={
                    'evse_id':tomada['evse_id'],
                    'uid':tomada['uid'],
                    'status':tomada['status'],
                    'last_updated':tomada['last_updated']}
                posto['connector']={
                    'id':tomada['connectors'][0]['id'],
                    'standard':tomada['connectors'][0]['standard'],
                    'format':tomada['connectors'][0]['format'],
                    'power_type':tomada['connectors'][0]['power_type'],
                    'max_voltage':tomada['connectors'][0]['max_voltage'],
                    'max_amperage':tomada['connectors'][0]['max_amperage'],
                    'max_electric_power':tomada['connectors'][0]['max_electric_power']}
                del tomada['connectors']
            del posto['evses']

        return json_data


    # remove unecessary information and extract only the charging stations from the Overpass API
    def extrai_postos(self,json_data):

        # ignore metadata and header information
        content = json_data['elements']

        # clean and structure the data
        for posto in content:
            info = posto['tags']
            for key in list(info.keys()):
                posto[key] = info[key]
            del posto['tags']
        
        return content


    # convert json to csv
    def convert_json_to_csv(self, json_data, csv_file):

        df = json_normalize(json_data)

        df.to_csv(caminho+csv_file)


    # add layer from the csv data (from the Overpass API)
    def add_layer_osm(self,uri):
    
        vlayer = QgsVectorLayer(uri, "postos_carregamento_overpass", "delimitedtext")
    
        QgsProject.instance().addMapLayer(vlayer)
        
        categories = []
        # get unique values
        unique_values = ['yes','no','']
        label = {'yes':'Cobra taxa','no':'NÃ£o cobra taxa','':'Desconhecido'}
        for unique_value in unique_values:
            # initialize the default symbol for this geometry type
            symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
            
            if unique_value == 'yes':
                path = "https://raw.githubusercontent.com/beatrizcepa26/SIG-2021/2296cc921ab8fd9b1a23bfb8b3fd5c84f6a0fa20/portuguese_charging_station/icons/carro-eletrico.svg"
            elif unique_value == 'no':
                path = "https://raw.githubusercontent.com/beatrizcepa26/SIG-2021/2296cc921ab8fd9b1a23bfb8b3fd5c84f6a0fa20/portuguese_charging_station/icons/carro-eletrico2.svg"
            else:
                path = "https://raw.githubusercontent.com/beatrizcepa26/SIG-2021/2296cc921ab8fd9b1a23bfb8b3fd5c84f6a0fa20/portuguese_charging_station/icons/carro-eletrico3.svg"
                
            new_symbol = QgsSvgMarkerSymbolLayer(path)
            new_symbol.setSize(6)
            
            # replace default symbol layer with the configured one
            symbol.changeSymbolLayer(0, new_symbol)

            # create renderer object
            category = QgsRendererCategory(unique_value, symbol, label[unique_value])
            
            # entry for the list of category items
            categories.append(category)
        
        # create renderer object
        renderer = QgsCategorizedSymbolRenderer('fee', categories)

        # assign the created renderer to the layer
        vlayer.setRenderer(renderer)


    # add layer from the csv data (from the Mobi.E network)
    def add_layer_mobie(self,uri):
    
        vlayer = QgsVectorLayer(uri, "postos_carregamento_mobie", "delimitedtext")

        QgsProject.instance().addMapLayer(vlayer)
        
        symbol = QgsSymbol.defaultSymbol(vlayer.geometryType())
        renderer = QgsRuleBasedRenderer(symbol)

        info = [("Cobra taxa",' \"Value (â‚¬)\" > (0) ',"https://raw.githubusercontent.com/beatrizcepa26/SIG-2021/2296cc921ab8fd9b1a23bfb8b3fd5c84f6a0fa20/portuguese_charging_station/icons/carro-eletrico_1.svg"),
        ("NÃ£o cobra taxa",' \"Value (â‚¬)\" = (0) ',"https://raw.githubusercontent.com/beatrizcepa26/SIG-2021/2296cc921ab8fd9b1a23bfb8b3fd5c84f6a0fa20/portuguese_charging_station/icons/carro-eletrico_2.svg")]
        
        for record in info:
        
            root_rule = renderer.rootRule()
            rule = root_rule.children()[0].clone()

            rule.setLabel(record[0])
            rule.setFilterExpression(record[1])

            path = record[2]
            new_symbol = QgsSvgMarkerSymbolLayer(path)
            new_symbol.setSize(6)
            rule.symbol().changeSymbolLayer(0, new_symbol)

            root_rule.appendChild(rule)
        
        root_rule.removeChildAt (0)
        
        vlayer.setRenderer(renderer)
        

    def add_open_street_map(self):
        # If the user doesn't have a layer defined in his project, a layer is added with a world map from OpenStreetMap
        
        sources = [layer.source() for layer in QgsProject.instance().mapLayers().values()]
        source_found = False
        for source in sources:
            if 'xyz&url' in source:
                source_found = True
                print('Encontrada uma camada')
        if not source_found:
            print('A adicionar camada...')
            urlWithParams = 'type=xyz&url=http://a.tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&zmax=19&zmin=0&crs=EPSG3857'
            rlayer = QgsRasterLayer(urlWithParams, 'OpenStreetMap', 'wms')
            if rlayer.isValid():
                QgsProject.instance().addMapLayer(rlayer)
            else:
                print('Camada invÃ¡lida')


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PortugueseChargingStationDialog()

        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()

        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems(['Rede Mobi.E', 'Overpass API','Both'])

        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        result = self.dlg.exec_()

        # See if OK was pressed
        if result:
            text = self.dlg.comboBox.currentText()
            if text == 'Rede Mobi.E':
                
                self.add_open_street_map()

                mobie_data = self.make_request('https://ocpi.mobinteli.com/2.2/locations')
                
                self.make_request_mobie_tarifas('https://www.mobie.pt/documents/42032/106470/Tarifas','tarifas.csv')

                json_data = self.processa(mobie_data)

                self.convert_json_to_csv(json_data,'mobie_data.csv')

                self.merge_csvs('mobie_data.csv','tarifas.csv')
                
                uri = "file:///"+caminho+'mobie_data_processado.csv?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s' % ("UTF-8",",", "longitude", "latitude","epsg:4326")
                
                self.add_layer_mobie(uri)

            elif text == 'Overpass API':

                url = 'https://lz4.overpass-api.de/api/interpreter?data=%3Cosm-script output%3D%22json%22 timeout%3D%2225%22%3E%0A    %3Cid-query ref%3D%223600295480%22 type%3D%22area%22 into%3D%22area_0%22/%3E%0A    %3Cunion%3E%0A        %3Cquery type%3D%22node%22%3E%0A            %3Chas-kv k%3D%22amenity%22 v%3D%22charging_station%22/%3E%0A            %3Carea-query from%3D%22area_0%22/%3E%0A        %3C/query%3E%0A        %3Cquery type%3D%22way%22%3E%0A            %3Chas-kv k%3D%22amenity%22 v%3D%22charging_station%22/%3E%0A            %3Carea-query from%3D%22area_0%22/%3E%0A        %3C/query%3E%0A        %3Cquery type%3D%22relation%22%3E%0A            %3Chas-kv k%3D%22amenity%22 v%3D%22charging_station%22/%3E%0A            %3Carea-query from%3D%22area_0%22/%3E%0A        %3C/query%3E%0A    %3C/union%3E%0A    %3Cunion%3E%0A        %3Citem/%3E%0A        %3Crecurse type%3D%22down%22/%3E%0A    %3C/union%3E%0A    %3Cprint mode%3D%22body%22/%3E%0A%3C/osm-script%3E&info=QgisQuickOSMPlugin'

                self.add_open_street_map()

                osm_data = self.make_request(url)
                
                json_data = self.extrai_postos(osm_data)

                self.convert_json_to_csv(json_data,'osm_data.csv')
               
                uri = "file:///"+caminho+'osm_data.csv?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s' % ("UTF-8",",", "lon", "lat","epsg:4326")
                
                self.add_layer_osm(uri)

            elif text == 'Both':

                self.add_open_street_map()

                mobie_data = self.make_request('https://ocpi.mobinteli.com/2.2/locations')
                
                self.make_request_mobie_tarifas('https://www.mobie.pt/documents/42032/106470/Tarifas','tarifas.csv')
                
                osm_data = self.make_request('https://lz4.overpass-api.de/api/interpreter?data=%3Cosm-script output%3D%22json%22 timeout%3D%2225%22%3E%0A    %3Cid-query ref%3D%223600295480%22 type%3D%22area%22 into%3D%22area_0%22/%3E%0A    %3Cunion%3E%0A        %3Cquery type%3D%22node%22%3E%0A            %3Chas-kv k%3D%22amenity%22 v%3D%22charging_station%22/%3E%0A            %3Carea-query from%3D%22area_0%22/%3E%0A        %3C/query%3E%0A        %3Cquery type%3D%22way%22%3E%0A            %3Chas-kv k%3D%22amenity%22 v%3D%22charging_station%22/%3E%0A            %3Carea-query from%3D%22area_0%22/%3E%0A        %3C/query%3E%0A        %3Cquery type%3D%22relation%22%3E%0A            %3Chas-kv k%3D%22amenity%22 v%3D%22charging_station%22/%3E%0A            %3Carea-query from%3D%22area_0%22/%3E%0A        %3C/query%3E%0A    %3C/union%3E%0A    %3Cunion%3E%0A        %3Citem/%3E%0A        %3Crecurse type%3D%22down%22/%3E%0A    %3C/union%3E%0A    %3Cprint mode%3D%22body%22/%3E%0A%3C/osm-script%3E&info=QgisQuickOSMPlugin')

                json_data = self.processa(mobie_data)

                self.convert_json_to_csv(json_data,'mobie_data.csv')

                self.merge_csvs('mobie_data.csv','tarifas.csv')
                
                uri = "file:///"+caminho+"mobie_data_processado.csv?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s" % ("UTF-8",",", "longitude", "latitude","epsg:4326")
                
                self.add_layer_mobie(uri)

                json_data = self.extrai_postos(osm_data)

                self.convert_json_to_csv(json_data,'osm_data.csv')
                
                uri = "file:///"+caminho+"osm_data.csv?encoding=%s&delimiter=%s&xField=%s&yField=%s&crs=%s" % ("UTF-8",",", "lon", "lat","epsg:4326")
                
                self.add_layer_osm(uri)

            else:
                print("Erro ao selecionar a fonte de informaÃ§Ã£o!")